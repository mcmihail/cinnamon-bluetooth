/*
 * Generated by gdbus-codegen 2.32.3. DO NOT EDIT.
 *
 * The license of this code is the same as for the source it was derived from.
 */

#ifndef __BLUETOOTH_CLIENT_GLUE_H__
#define __BLUETOOTH_CLIENT_GLUE_H__

#include <gio/gio.h>

G_BEGIN_DECLS


/* ------------------------------------------------------------------------ */
/* Declarations for org.bluez.Manager */

#define TYPE_MANAGER (manager_get_type ())
#define MANAGER(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), TYPE_MANAGER, Manager))
#define IS_MANAGER(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), TYPE_MANAGER))
#define MANAGER_GET_IFACE(o) (G_TYPE_INSTANCE_GET_INTERFACE ((o), TYPE_MANAGER, ManagerIface))

struct _Manager;
typedef struct _Manager Manager;
typedef struct _ManagerIface ManagerIface;

struct _ManagerIface
{
  GTypeInterface parent_iface;


  gboolean (*handle_default_adapter) (
    Manager *object,
    GDBusMethodInvocation *invocation);

  gboolean (*handle_get_properties) (
    Manager *object,
    GDBusMethodInvocation *invocation);

  void (*adapter_added) (
    Manager *object,
    const gchar *arg_unnamed_arg0);

  void (*adapter_removed) (
    Manager *object,
    const gchar *arg_unnamed_arg0);

  void (*default_adapter_changed) (
    Manager *object,
    const gchar *arg_unnamed_arg0);

};

GType manager_get_type (void) G_GNUC_CONST;

GDBusInterfaceInfo *manager_interface_info (void);
guint manager_override_properties (GObjectClass *klass, guint property_id_begin);


/* D-Bus method call completion functions: */
void manager_complete_default_adapter (
    Manager *object,
    GDBusMethodInvocation *invocation,
    const gchar *unnamed_arg0);

void manager_complete_get_properties (
    Manager *object,
    GDBusMethodInvocation *invocation,
    GVariant *unnamed_arg0);



/* D-Bus signal emissions functions: */
void manager_emit_adapter_added (
    Manager *object,
    const gchar *arg_unnamed_arg0);

void manager_emit_adapter_removed (
    Manager *object,
    const gchar *arg_unnamed_arg0);

void manager_emit_default_adapter_changed (
    Manager *object,
    const gchar *arg_unnamed_arg0);



/* D-Bus method calls: */
void manager_call_default_adapter (
    Manager *proxy,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean manager_call_default_adapter_finish (
    Manager *proxy,
    gchar **out_unnamed_arg0,
    GAsyncResult *res,
    GError **error);

gboolean manager_call_default_adapter_sync (
    Manager *proxy,
    gchar **out_unnamed_arg0,
    GCancellable *cancellable,
    GError **error);

void manager_call_get_properties (
    Manager *proxy,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean manager_call_get_properties_finish (
    Manager *proxy,
    GVariant **out_unnamed_arg0,
    GAsyncResult *res,
    GError **error);

gboolean manager_call_get_properties_sync (
    Manager *proxy,
    GVariant **out_unnamed_arg0,
    GCancellable *cancellable,
    GError **error);



/* ---- */

#define TYPE_MANAGER_PROXY (manager_proxy_get_type ())
#define MANAGER_PROXY(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), TYPE_MANAGER_PROXY, ManagerProxy))
#define MANAGER_PROXY_CLASS(k) (G_TYPE_CHECK_CLASS_CAST ((k), TYPE_MANAGER_PROXY, ManagerProxyClass))
#define MANAGER_PROXY_GET_CLASS(o) (G_TYPE_INSTANCE_GET_CLASS ((o), TYPE_MANAGER_PROXY, ManagerProxyClass))
#define IS_MANAGER_PROXY(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), TYPE_MANAGER_PROXY))
#define IS_MANAGER_PROXY_CLASS(k) (G_TYPE_CHECK_CLASS_TYPE ((k), TYPE_MANAGER_PROXY))

typedef struct _ManagerProxy ManagerProxy;
typedef struct _ManagerProxyClass ManagerProxyClass;
typedef struct _ManagerProxyPrivate ManagerProxyPrivate;

struct _ManagerProxy
{
  /*< private >*/
  GDBusProxy parent_instance;
  ManagerProxyPrivate *priv;
};

struct _ManagerProxyClass
{
  GDBusProxyClass parent_class;
};

GType manager_proxy_get_type (void) G_GNUC_CONST;

void manager_proxy_new (
    GDBusConnection     *connection,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GAsyncReadyCallback  callback,
    gpointer             user_data);
Manager *manager_proxy_new_finish (
    GAsyncResult        *res,
    GError             **error);
Manager *manager_proxy_new_sync (
    GDBusConnection     *connection,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GError             **error);

void manager_proxy_new_for_bus (
    GBusType             bus_type,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GAsyncReadyCallback  callback,
    gpointer             user_data);
Manager *manager_proxy_new_for_bus_finish (
    GAsyncResult        *res,
    GError             **error);
Manager *manager_proxy_new_for_bus_sync (
    GBusType             bus_type,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GError             **error);


/* ---- */

#define TYPE_MANAGER_SKELETON (manager_skeleton_get_type ())
#define MANAGER_SKELETON(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), TYPE_MANAGER_SKELETON, ManagerSkeleton))
#define MANAGER_SKELETON_CLASS(k) (G_TYPE_CHECK_CLASS_CAST ((k), TYPE_MANAGER_SKELETON, ManagerSkeletonClass))
#define MANAGER_SKELETON_GET_CLASS(o) (G_TYPE_INSTANCE_GET_CLASS ((o), TYPE_MANAGER_SKELETON, ManagerSkeletonClass))
#define IS_MANAGER_SKELETON(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), TYPE_MANAGER_SKELETON))
#define IS_MANAGER_SKELETON_CLASS(k) (G_TYPE_CHECK_CLASS_TYPE ((k), TYPE_MANAGER_SKELETON))

typedef struct _ManagerSkeleton ManagerSkeleton;
typedef struct _ManagerSkeletonClass ManagerSkeletonClass;
typedef struct _ManagerSkeletonPrivate ManagerSkeletonPrivate;

struct _ManagerSkeleton
{
  /*< private >*/
  GDBusInterfaceSkeleton parent_instance;
  ManagerSkeletonPrivate *priv;
};

struct _ManagerSkeletonClass
{
  GDBusInterfaceSkeletonClass parent_class;
};

GType manager_skeleton_get_type (void) G_GNUC_CONST;

Manager *manager_skeleton_new (void);


/* ------------------------------------------------------------------------ */
/* Declarations for org.bluez.Adapter */

#define TYPE_ADAPTER (adapter_get_type ())
#define ADAPTER(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), TYPE_ADAPTER, Adapter))
#define IS_ADAPTER(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), TYPE_ADAPTER))
#define ADAPTER_GET_IFACE(o) (G_TYPE_INSTANCE_GET_INTERFACE ((o), TYPE_ADAPTER, AdapterIface))

struct _Adapter;
typedef struct _Adapter Adapter;
typedef struct _AdapterIface AdapterIface;

struct _AdapterIface
{
  GTypeInterface parent_iface;


  gboolean (*handle_get_properties) (
    Adapter *object,
    GDBusMethodInvocation *invocation);

  gboolean (*handle_remove_device) (
    Adapter *object,
    GDBusMethodInvocation *invocation,
    const gchar *arg_device);

  gboolean (*handle_set_property) (
    Adapter *object,
    GDBusMethodInvocation *invocation,
    const gchar *arg_unnamed_arg0,
    GVariant *arg_unnamed_arg1);

  gboolean (*handle_start_discovery) (
    Adapter *object,
    GDBusMethodInvocation *invocation);

  gboolean (*handle_stop_discovery) (
    Adapter *object,
    GDBusMethodInvocation *invocation);

  void (*device_created) (
    Adapter *object,
    const gchar *arg_unnamed_arg0);

  void (*device_found) (
    Adapter *object,
    const gchar *arg_unnamed_arg0,
    GVariant *arg_unnamed_arg1);

  void (*device_removed) (
    Adapter *object,
    const gchar *arg_unnamed_arg0);

  void (*property_changed) (
    Adapter *object,
    const gchar *arg_unnamed_arg0,
    GVariant *arg_unnamed_arg1);

};

GType adapter_get_type (void) G_GNUC_CONST;

GDBusInterfaceInfo *adapter_interface_info (void);
guint adapter_override_properties (GObjectClass *klass, guint property_id_begin);


/* D-Bus method call completion functions: */
void adapter_complete_get_properties (
    Adapter *object,
    GDBusMethodInvocation *invocation,
    GVariant *unnamed_arg0);

void adapter_complete_set_property (
    Adapter *object,
    GDBusMethodInvocation *invocation);

void adapter_complete_start_discovery (
    Adapter *object,
    GDBusMethodInvocation *invocation);

void adapter_complete_stop_discovery (
    Adapter *object,
    GDBusMethodInvocation *invocation);

void adapter_complete_remove_device (
    Adapter *object,
    GDBusMethodInvocation *invocation);



/* D-Bus signal emissions functions: */
void adapter_emit_property_changed (
    Adapter *object,
    const gchar *arg_unnamed_arg0,
    GVariant *arg_unnamed_arg1);

void adapter_emit_device_created (
    Adapter *object,
    const gchar *arg_unnamed_arg0);

void adapter_emit_device_removed (
    Adapter *object,
    const gchar *arg_unnamed_arg0);

void adapter_emit_device_found (
    Adapter *object,
    const gchar *arg_unnamed_arg0,
    GVariant *arg_unnamed_arg1);



/* D-Bus method calls: */
void adapter_call_get_properties (
    Adapter *proxy,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean adapter_call_get_properties_finish (
    Adapter *proxy,
    GVariant **out_unnamed_arg0,
    GAsyncResult *res,
    GError **error);

gboolean adapter_call_get_properties_sync (
    Adapter *proxy,
    GVariant **out_unnamed_arg0,
    GCancellable *cancellable,
    GError **error);

void adapter_call_set_property (
    Adapter *proxy,
    const gchar *arg_unnamed_arg0,
    GVariant *arg_unnamed_arg1,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean adapter_call_set_property_finish (
    Adapter *proxy,
    GAsyncResult *res,
    GError **error);

gboolean adapter_call_set_property_sync (
    Adapter *proxy,
    const gchar *arg_unnamed_arg0,
    GVariant *arg_unnamed_arg1,
    GCancellable *cancellable,
    GError **error);

void adapter_call_start_discovery (
    Adapter *proxy,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean adapter_call_start_discovery_finish (
    Adapter *proxy,
    GAsyncResult *res,
    GError **error);

gboolean adapter_call_start_discovery_sync (
    Adapter *proxy,
    GCancellable *cancellable,
    GError **error);

void adapter_call_stop_discovery (
    Adapter *proxy,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean adapter_call_stop_discovery_finish (
    Adapter *proxy,
    GAsyncResult *res,
    GError **error);

gboolean adapter_call_stop_discovery_sync (
    Adapter *proxy,
    GCancellable *cancellable,
    GError **error);

void adapter_call_remove_device (
    Adapter *proxy,
    const gchar *arg_device,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean adapter_call_remove_device_finish (
    Adapter *proxy,
    GAsyncResult *res,
    GError **error);

gboolean adapter_call_remove_device_sync (
    Adapter *proxy,
    const gchar *arg_device,
    GCancellable *cancellable,
    GError **error);



/* ---- */

#define TYPE_ADAPTER_PROXY (adapter_proxy_get_type ())
#define ADAPTER_PROXY(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), TYPE_ADAPTER_PROXY, AdapterProxy))
#define ADAPTER_PROXY_CLASS(k) (G_TYPE_CHECK_CLASS_CAST ((k), TYPE_ADAPTER_PROXY, AdapterProxyClass))
#define ADAPTER_PROXY_GET_CLASS(o) (G_TYPE_INSTANCE_GET_CLASS ((o), TYPE_ADAPTER_PROXY, AdapterProxyClass))
#define IS_ADAPTER_PROXY(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), TYPE_ADAPTER_PROXY))
#define IS_ADAPTER_PROXY_CLASS(k) (G_TYPE_CHECK_CLASS_TYPE ((k), TYPE_ADAPTER_PROXY))

typedef struct _AdapterProxy AdapterProxy;
typedef struct _AdapterProxyClass AdapterProxyClass;
typedef struct _AdapterProxyPrivate AdapterProxyPrivate;

struct _AdapterProxy
{
  /*< private >*/
  GDBusProxy parent_instance;
  AdapterProxyPrivate *priv;
};

struct _AdapterProxyClass
{
  GDBusProxyClass parent_class;
};

GType adapter_proxy_get_type (void) G_GNUC_CONST;

void adapter_proxy_new (
    GDBusConnection     *connection,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GAsyncReadyCallback  callback,
    gpointer             user_data);
Adapter *adapter_proxy_new_finish (
    GAsyncResult        *res,
    GError             **error);
Adapter *adapter_proxy_new_sync (
    GDBusConnection     *connection,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GError             **error);

void adapter_proxy_new_for_bus (
    GBusType             bus_type,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GAsyncReadyCallback  callback,
    gpointer             user_data);
Adapter *adapter_proxy_new_for_bus_finish (
    GAsyncResult        *res,
    GError             **error);
Adapter *adapter_proxy_new_for_bus_sync (
    GBusType             bus_type,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GError             **error);


/* ---- */

#define TYPE_ADAPTER_SKELETON (adapter_skeleton_get_type ())
#define ADAPTER_SKELETON(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), TYPE_ADAPTER_SKELETON, AdapterSkeleton))
#define ADAPTER_SKELETON_CLASS(k) (G_TYPE_CHECK_CLASS_CAST ((k), TYPE_ADAPTER_SKELETON, AdapterSkeletonClass))
#define ADAPTER_SKELETON_GET_CLASS(o) (G_TYPE_INSTANCE_GET_CLASS ((o), TYPE_ADAPTER_SKELETON, AdapterSkeletonClass))
#define IS_ADAPTER_SKELETON(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), TYPE_ADAPTER_SKELETON))
#define IS_ADAPTER_SKELETON_CLASS(k) (G_TYPE_CHECK_CLASS_TYPE ((k), TYPE_ADAPTER_SKELETON))

typedef struct _AdapterSkeleton AdapterSkeleton;
typedef struct _AdapterSkeletonClass AdapterSkeletonClass;
typedef struct _AdapterSkeletonPrivate AdapterSkeletonPrivate;

struct _AdapterSkeleton
{
  /*< private >*/
  GDBusInterfaceSkeleton parent_instance;
  AdapterSkeletonPrivate *priv;
};

struct _AdapterSkeletonClass
{
  GDBusInterfaceSkeletonClass parent_class;
};

GType adapter_skeleton_get_type (void) G_GNUC_CONST;

Adapter *adapter_skeleton_new (void);


/* ------------------------------------------------------------------------ */
/* Declarations for org.bluez.Device */

#define TYPE_DEVICE (device_get_type ())
#define DEVICE(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), TYPE_DEVICE, Device))
#define IS_DEVICE(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), TYPE_DEVICE))
#define DEVICE_GET_IFACE(o) (G_TYPE_INSTANCE_GET_INTERFACE ((o), TYPE_DEVICE, DeviceIface))

struct _Device;
typedef struct _Device Device;
typedef struct _DeviceIface DeviceIface;

struct _DeviceIface
{
  GTypeInterface parent_iface;


  gboolean (*handle_disconnect) (
    Device *object,
    GDBusMethodInvocation *invocation);

  gboolean (*handle_get_properties) (
    Device *object,
    GDBusMethodInvocation *invocation);

  gboolean (*handle_set_property) (
    Device *object,
    GDBusMethodInvocation *invocation,
    const gchar *arg_unnamed_arg0,
    GVariant *arg_unnamed_arg1);

  void (*property_changed) (
    Device *object,
    const gchar *arg_unnamed_arg0,
    GVariant *arg_unnamed_arg1);

};

GType device_get_type (void) G_GNUC_CONST;

GDBusInterfaceInfo *device_interface_info (void);
guint device_override_properties (GObjectClass *klass, guint property_id_begin);


/* D-Bus method call completion functions: */
void device_complete_get_properties (
    Device *object,
    GDBusMethodInvocation *invocation,
    GVariant *unnamed_arg0);

void device_complete_set_property (
    Device *object,
    GDBusMethodInvocation *invocation);

void device_complete_disconnect (
    Device *object,
    GDBusMethodInvocation *invocation);



/* D-Bus signal emissions functions: */
void device_emit_property_changed (
    Device *object,
    const gchar *arg_unnamed_arg0,
    GVariant *arg_unnamed_arg1);



/* D-Bus method calls: */
void device_call_get_properties (
    Device *proxy,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean device_call_get_properties_finish (
    Device *proxy,
    GVariant **out_unnamed_arg0,
    GAsyncResult *res,
    GError **error);

gboolean device_call_get_properties_sync (
    Device *proxy,
    GVariant **out_unnamed_arg0,
    GCancellable *cancellable,
    GError **error);

void device_call_set_property (
    Device *proxy,
    const gchar *arg_unnamed_arg0,
    GVariant *arg_unnamed_arg1,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean device_call_set_property_finish (
    Device *proxy,
    GAsyncResult *res,
    GError **error);

gboolean device_call_set_property_sync (
    Device *proxy,
    const gchar *arg_unnamed_arg0,
    GVariant *arg_unnamed_arg1,
    GCancellable *cancellable,
    GError **error);

void device_call_disconnect (
    Device *proxy,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean device_call_disconnect_finish (
    Device *proxy,
    GAsyncResult *res,
    GError **error);

gboolean device_call_disconnect_sync (
    Device *proxy,
    GCancellable *cancellable,
    GError **error);



/* ---- */

#define TYPE_DEVICE_PROXY (device_proxy_get_type ())
#define DEVICE_PROXY(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), TYPE_DEVICE_PROXY, DeviceProxy))
#define DEVICE_PROXY_CLASS(k) (G_TYPE_CHECK_CLASS_CAST ((k), TYPE_DEVICE_PROXY, DeviceProxyClass))
#define DEVICE_PROXY_GET_CLASS(o) (G_TYPE_INSTANCE_GET_CLASS ((o), TYPE_DEVICE_PROXY, DeviceProxyClass))
#define IS_DEVICE_PROXY(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), TYPE_DEVICE_PROXY))
#define IS_DEVICE_PROXY_CLASS(k) (G_TYPE_CHECK_CLASS_TYPE ((k), TYPE_DEVICE_PROXY))

typedef struct _DeviceProxy DeviceProxy;
typedef struct _DeviceProxyClass DeviceProxyClass;
typedef struct _DeviceProxyPrivate DeviceProxyPrivate;

struct _DeviceProxy
{
  /*< private >*/
  GDBusProxy parent_instance;
  DeviceProxyPrivate *priv;
};

struct _DeviceProxyClass
{
  GDBusProxyClass parent_class;
};

GType device_proxy_get_type (void) G_GNUC_CONST;

void device_proxy_new (
    GDBusConnection     *connection,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GAsyncReadyCallback  callback,
    gpointer             user_data);
Device *device_proxy_new_finish (
    GAsyncResult        *res,
    GError             **error);
Device *device_proxy_new_sync (
    GDBusConnection     *connection,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GError             **error);

void device_proxy_new_for_bus (
    GBusType             bus_type,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GAsyncReadyCallback  callback,
    gpointer             user_data);
Device *device_proxy_new_for_bus_finish (
    GAsyncResult        *res,
    GError             **error);
Device *device_proxy_new_for_bus_sync (
    GBusType             bus_type,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GError             **error);


/* ---- */

#define TYPE_DEVICE_SKELETON (device_skeleton_get_type ())
#define DEVICE_SKELETON(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), TYPE_DEVICE_SKELETON, DeviceSkeleton))
#define DEVICE_SKELETON_CLASS(k) (G_TYPE_CHECK_CLASS_CAST ((k), TYPE_DEVICE_SKELETON, DeviceSkeletonClass))
#define DEVICE_SKELETON_GET_CLASS(o) (G_TYPE_INSTANCE_GET_CLASS ((o), TYPE_DEVICE_SKELETON, DeviceSkeletonClass))
#define IS_DEVICE_SKELETON(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), TYPE_DEVICE_SKELETON))
#define IS_DEVICE_SKELETON_CLASS(k) (G_TYPE_CHECK_CLASS_TYPE ((k), TYPE_DEVICE_SKELETON))

typedef struct _DeviceSkeleton DeviceSkeleton;
typedef struct _DeviceSkeletonClass DeviceSkeletonClass;
typedef struct _DeviceSkeletonPrivate DeviceSkeletonPrivate;

struct _DeviceSkeleton
{
  /*< private >*/
  GDBusInterfaceSkeleton parent_instance;
  DeviceSkeletonPrivate *priv;
};

struct _DeviceSkeletonClass
{
  GDBusInterfaceSkeletonClass parent_class;
};

GType device_skeleton_get_type (void) G_GNUC_CONST;

Device *device_skeleton_new (void);


G_END_DECLS

#endif /* __BLUETOOTH_CLIENT_GLUE_H__ */
